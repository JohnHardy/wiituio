using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Diagnostics;
using System.Windows;

namespace WiiTUIO.Provider
{
    /// <summary>
    /// A WiiContact describes details of the input generated by a Wiimote.  See the <see cref="Contact"/> class for more details.
    /// </summary>
    public class WiiContact
    {
        /// <summary>
        /// The classifer responsible for this history of this contact.
        /// </summary>
        public SpatioTemporalClassifier Classifier { get; private set; }

        /// <summary>
        /// The tracker which is responsible for the history of this input.
        /// </summary>
        public SpatioTemporalTracker Tracker { get; private set; }

        /// <summary>
        /// Return the unique ID of this contact.
        /// </summary>
        public ulong ID { get; protected set; }

        /// <summary>
        /// Return the type of the contact - is it new, old or an update to an existing one.
        /// </summary>
        public ContactType Type { get; protected set; }

        /// <summary>
        /// Return the position generated by the contact.
        /// </summary>
        public Point Position { get; protected set; }

        /// <summary>
        /// Return the normalised position of the contact (0..1 range).
        /// </summary>
        public Point NormalPosition { get; protected set; }

        /// <summary>
        /// Return the size of the contact.
        /// </summary>
        public Vector Size { get; protected set; }

        /// <summary>
        /// Return the bounding rectangle of the contact (using the size as the width and height and the position as the center).
        /// </summary>
        public Rect BoundingRectangle
        {
            get
            {
                return new Rect(Position.X - (Size.X / 2), Position.Y - (Size.Y / 2), Size.X, Size.Y);
            }
        }

        /// <summary>
        /// Return the area of the contact - this is here partially for calculating pressure.
        /// </summary>
        public double Area
        {
            get
            {
                return Size.X * Size.Y;
            }
        }

        /// <summary>
        /// Construct a new WiiContact.
        /// </summary>
        /// <param name="iID">The unique session ID for this input.</param>
        /// <param name="eContactType">The type of contact.</param>
        /// <param name="tPosition">The position which generated the contact.</param>
        /// <param name="tNormalPosition">The maximum width/height so that we can generate a normalised position.</param>
        /// <param name="pClassifier">The classifer responsible for the history</param>
        /// <param name="pTracker">The tracker within the classifer responsible for the direct history.</param>
        public WiiContact(ulong iID, ContactType eContactType, Point tPosition, Vector tScreenSize, SpatioTemporalClassifier pClassifier, SpatioTemporalTracker pTracker)
        {
            this.Classifier = pClassifier;
            this.Tracker = pTracker;

            this.ID = iID;
            this.Type = eContactType;
            this.Position = tPosition;
            this.NormalPosition = new Point(tPosition.X / tScreenSize.X, tPosition.Y / tScreenSize.Y);
            this.Size = new Vector(1, 1);
        }
    }
}
